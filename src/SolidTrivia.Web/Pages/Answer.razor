@page "/board/{SessionId}/answer/{AnswerId:guid}"
@using System.Threading;
@inject NavigationManager NavigationManager
@inject SolidTrivia.Game.ISolidTrivia SolidTrivia

<div class="answer-wrapper">
    <div class="answer-header">
        <div class="answer-timer">
            @Timer remaining
        </div>
        <div class="answer-stats">
            <p>Responses: @Session.Responses.Count(r => r.AnswerId == ThisAnswer.Id)</p>
            <p>Players:&nbsp;&nbsp; @Session.Players.Count()</p>
        </div>
        <div class="answer-nav">
            <button @onclick="NavigateToResponse">Responses</button>
            <button @onclick="MarkAsAnswered">Continue -></button>
        </div>
    </div>
    <div class="answer-content">
        @ThisAnswer.AnswerText
    </div>
    @if (ThisAnswer.HasCode)
    {
        <SolidTrivia.Web.Components.AnswerCodeComponent />
    }
</div>

@code {
    [Parameter]
    public Guid AnswerId { get; set; }

    [Parameter]
    public string SessionId { get; set; }

    private SolidTrivia.Game.GameSession Session { get; set; }
    private SolidTrivia.Game.Models.Answer ThisAnswer { get; set; }

    private int Timer { get; set; } = 120;

    protected override void OnInitialized()
    {

        Session = SolidTrivia.GetSessionById(SessionId);
        ThisAnswer = Session.CurrentAnswer();
        Session.PropertyChanged += (o, e) => base.InvokeAsync(StateHasChanged);
        CountDown();
    }

    protected void MarkAsAnswered()
    {
        Session.MarkCurrentAnswerAsAnswered();
        NavigationManager.NavigateTo($"Board/{SessionId}");
    }

    protected void NavigateToResponse()
    {
        NavigationManager.NavigateTo($"Board/{SessionId}/response/{AnswerId}");
    }

    private void CountDown()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Timer > 0)
            {
                Timer--;
                base.InvokeAsync(StateHasChanged);
            }
        }), null, 1000, 1000);
    }
}